{"version":3,"sources":["components/layouts/Form.js","components/resources/Fetch.js","components/layouts/Notification.js","components/resources/UserEvent.js","components/app/App.js","components/register/Register.js","components/resources/store/Store.js","components/resources/store/ActionCreators.js","components/resources/HomeEvent.js","components/layouts/Navigation.js","components/layouts/Message.js","components/layouts/NewGroup.js","components/layouts/View.js","components/userprofile/UserProfile.js","components/home/Home.js","serviceWorker.js","index.js","components/home/Home.module.css","components/app/App.module.css"],"names":["layouts_Form","props","react_default","a","createElement","Container","Row","Col","md","className","Card","CardHeader","title","CardBody","Form","onSubmit","handleEvent","FormGroup","Input","type","name","placeholder","required","value","Button","outline","color","size","block","Link","styles","enlace","to","path","uri","text","Fetch","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","fields","method","cb","body","headers","response","data","wrap","_context","prev","next","JSON","stringify","Headers","append","atob","localStorage","getItem","fetch","sent","json","t0","console","error","concat","stop","this","_x","_x2","_x3","_x4","apply","arguments","Notification","code","msg","length","undefined","delay","callback","options","push","NotificationManager","success","warning","info","UserEvent","FormRegister","e","preventDefault","_e$target","target","email","password","gender","profile","FetchData","status","window","location","href","Notifications","FormLogin","_e$target3","setItem","btoa","FormUpdate","id","_e$target2","App","fakeAuth","bind","Component","Register","createStore","state","action","objectSpread","users","groups","groupname","messages","Users","socket","io","on","GetDataUser","emit","_id","Store","dispatch","ConvertInfoUsers","group","Askformessages","message","LoadMessages","SwitchGroup","infoUser","dataUser","values","forEach","split","HomeEvent","NewGroup","infoNewGroup","log","NewMessage","document","getElementsByName","AskformessagesIndividual","Navigation","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toggle","assertThisInitialized","isOpen","typechat","setState","_this2","Navbar","light","expand","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","onChange","Message","width","height","alt","src","username","moment","createdAt","format","popoverOpen","Popover","placement","PopoverHeader","PopoverBody","newgroup","Groups","NavLink","groupchange","Badge","userActive","UserProfile","Modal","modal","user","ModalHeader","ModalBody","form","defaultValue","ModalFooter","Home","usersCount","groupsCount","prevState","subscribe","getState","getElementsByClassName","childElementCount","_this3","fluid","menubar1","CardImg","top","CardTitle","logout","menubar2","layouts_NewGroup","groupContent","vertical","View_Groups","map","i","key","usersContent","View_Users","relationship","user1","user2","layouts_Navigation","bodyContent","userprofile_UserProfile","Boolean","hostname","match","Authenticated","session","Redirect","Logout","confirm","removeItem","RouteProvider","component","objectPath","objectWithoutProperties","Route","assign","render","ReactDOM","BrowserRouter","lib","Switch","src_RouteProvider","exact","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","nav-item"],"mappings":"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","file":"static/js/main.038f617d.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n    Button, Container, Col, Card, CardHeader, CardBody, Form, FormGroup, Input, Row\r\n} from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport styles from '../app/App.module.css';\r\n//component used to log in and register\r\nexport default props => (\r\n    <Container>\r\n        <Row>\r\n            <Col md={4} className=\"offset-md-4\">\r\n                <Card>\r\n                    <CardHeader><h1><i className=\"fas fa-user-circle\"></i> {props.title} </h1></CardHeader>\r\n                    <CardBody>\r\n                        <Form onSubmit={props.handleEvent}>\r\n                            {props.title !== \"Login\" &&\r\n                                <FormGroup>\r\n                                    <Input type=\"text\" name=\"name\" placeholder=\"Enter your Name\" required />\r\n                                </FormGroup>\r\n                            }\r\n                            <FormGroup>\r\n                                <Input type=\"email\" name=\"email\" placeholder=\"Enter your Email\" required />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Input type=\"password\" name=\"password\" placeholder=\"Enter your Password\" required />\r\n                            </FormGroup>\r\n                            {props.title !== \"Login\" &&\r\n                                <div>\r\n                                    <FormGroup>\r\n                                        <Input type=\"url\" name=\"profile\" placeholder=\"Enter your url image\" />\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Input type=\"select\" name=\"gender\" required>\r\n                                            <option value=\"\">Select your gender</option>\r\n                                            <option>Male</option>\r\n                                            <option>Female</option>\r\n                                            <option>Others</option>\r\n                                        </Input>\r\n                                    </FormGroup>\r\n                                </div>\r\n                            }\r\n                            <FormGroup>\r\n                                <Button outline color=\"success\" size=\"lg\" block>{props.title}</Button>\r\n                                <small>\r\n                                    <Link className={styles.enlace} to={props.path.uri} color=\"info\">{props.path.text}</Link>\r\n                                </small>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </CardBody>\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n    </Container>\r\n);\r\n","export default async (uri, fields, method, cb) => {\r\n    try {\r\n        let body = JSON.stringify(fields), headers = new Headers();\r\n        headers.append('Content-Type', 'application/json');\r\n        headers.append('Authorization', atob(localStorage.getItem('fakeAuth')));\r\n        let response = await fetch(uri,\r\n            method !== \"get\" ? { method, body, headers } : { method, headers }),\r\n            data = await response.json();\r\n        cb(data);\r\n    } catch (error) {\r\n        console.error(`Error: ${error}`);\r\n    }\r\n}","import { NotificationManager } from 'react-notifications';\n/**\n * Positions of NotificationManager events\n * 1) message\n * 2) title\n * 3) delay\n * 4) callback\n */\nexport default (code, msg, title = '', delay = 3000, callback = null) => {\n    let options = [];\n    options.push(msg, title, delay, callback);\n    switch (code) {\n        case 200:\n            NotificationManager.success(...options);\n            break;\n        case 400:\n        case 401:\n        case 403:\n        case 406:\n            NotificationManager.warning(...options);\n            break;\n        case 409:\n        case 404:\n            NotificationManager.info(...options);\n            break;\n        case 500:\n            NotificationManager.error(...options);\n            break;\n        default:\n            break;\n    }\n}\n","import FetchData from './Fetch';\r\nimport Notifications from '../layouts/Notification';\r\n\r\n//register users\r\nconst FormRegister = e => {\r\n    e.preventDefault();\r\n    let { name, email, password, gender, profile } = e.target;\r\n    FetchData('/auth/register', {\r\n        name: name.value,\r\n        email: email.value,\r\n        password: password.value,\r\n        gender: gender.value,\r\n        profile: profile.value\r\n    }, 'post', data => {\r\n        if (data.status === 200) {\r\n            window.location.href = \"/\";\r\n        } else {\r\n            Notifications(data.status, data.response);\r\n        }\r\n    });\r\n}\r\n\r\n//update user data\r\nconst FormUpdate = (e, id) => {\r\n    e.preventDefault();\r\n    let { name, email, password, gender, profile } = e.target;\r\n    FetchData(`/auth/update/${id}`, {\r\n        name: name.value,\r\n        email: email.value,\r\n        password: password.value,\r\n        gender: gender.value,\r\n        profile: profile.value\r\n    }, 'put', data => {\r\n        if (data.status === 200) {\r\n            window.location.href = \"/home\";\r\n        } else {\r\n            Notifications(data.status, data.response);\r\n        }\r\n    });\r\n}\r\n\r\n//login for users\r\nconst FormLogin = e => {\r\n    e.preventDefault();\r\n    let { email, password } = e.target;\r\n    FetchData('/auth/login', {\r\n        email: email.value,\r\n        password: password.value\r\n    }, 'post', data => {\r\n        if (data.status === 200) {\r\n            localStorage.setItem('fakeAuth', btoa(data.response));\r\n            window.location.href = \"/home\";\r\n        } else {\r\n            Notifications(data.status, data.response);\r\n        }\r\n    });\r\n}\r\n\r\n\r\nexport default {\r\n    FormRegister,\r\n    FormLogin,\r\n    FormUpdate\r\n};\r\n","import React, { Component } from 'react';\nimport Form from '../layouts/Form';\nimport UserEvent from '../resources/UserEvent';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"L_R\">\n        {this.props.fakeAuth('public')}\n        <Form title=\"Login\" handleEvent={UserEvent.FormLogin.bind(this)} path={{ uri: \"/register\", text: \"Create an account\" }}></Form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport Form from '../layouts/Form';\nimport UserEvent from '../resources/UserEvent';\n\nclass Register extends Component {\n  render() {\n    return (\n      <div className=\"L_R\">\n        {this.props.fakeAuth('public')}\n        <Form title=\"Register\" handleEvent={UserEvent.FormRegister.bind(this)} path={{ uri: \"/\", text: \"Go to login\" }}></Form>\n      </div>\n    );\n  }\n}\n\nexport default Register;\n","import { createStore } from 'redux';\n\n//create storage of global states in the application\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'USERS':\n            return {\n                ...state,\n                users: action.users\n            };\n        case 'GROUPS':\n            return {\n                ...state,\n                groups: action.groups\n            };\n\n        case 'GROUP_NAME':\n            return {\n                ...state,\n                groupname: action.groupname\n            };\n\n        case 'LOAD_MESSAGE':\n            return {\n                ...state,\n                messages: action.messages\n            };\n        default:\n            return state;\n    }\n}\n\nexport default createStore(reducer, {\n    users: [],\n    groups: [],\n    groupname: \"\",\n    messages: []\n});","//action to store the list of users\nconst Users = users => ({\n    type: \"USERS\",\n    users\n});\n//action to store the list of groups\nconst Groups = groups => ({\n    type: \"GROUPS\",\n    groups\n});\n\n//action to get the name of the current group\nconst GroupName = groupname => ({\n    type: \"GROUP_NAME\",\n    groupname\n});\n\n//action for loading messages\nconst LoadMessages = messages => ({\n    type: \"LOAD_MESSAGE\",\n    messages\n});\n\nexport {\n    Users,\n    Groups,\n    GroupName,\n    LoadMessages\n}","import FetchData from './Fetch';\nimport io from 'socket.io-client';\nimport Store from './store/Store';\nimport Notifications from '../layouts/Notification';\nimport { Users, Groups, GroupName, LoadMessages } from './store/ActionCreators';\n\n//start the connection of clients with server\nconst socket = io('http://localhost:5000/');\n//check if a user has a defined session\nif (localStorage.getItem(\"fakeAuth\") !== null) {\n    // check that a customer has connected\n    socket.on('connect', () => {\n        //issue the new customer's data to the server\n        GetDataUser(data => socket.emit('newuser', {\n            _id: data.response._id,\n            name: data.response.name,\n            email: data.response.email,\n            profile: data.response.profile\n        }));\n    });\n    //get the list of groups in the client\n    socket.on(\"getgroups\", data => Store.dispatch(Groups(data)));\n    //fill the list of connected users and those who disconnect\n    socket.on('users', data => Store.dispatch(Users(ConvertInfoUsers(data))));\n    //refresh the list with users that are disconnecting\n    socket.on('updateusers', data => Store.dispatch(Users(ConvertInfoUsers(data))));\n    //local alert to load messages and send a message to the same customer\n    socket.on(\"updatelocalchat\", data => {\n        Store.dispatch(GroupName(data.group));\n        Askformessages(data.group);\n        if(data.status!==\"\"){\n            Notifications(data.status, data.message)\n        }\n    });\n    //alert people when there is a new status change in the chat\n    socket.on(\"updatechat\", data => Notifications(data.status, data.message));\n    //loading messages app store\n    socket.on(\"loadmessages\", messages => Store.dispatch(LoadMessages(messages)));\n}\n//get the information from a user's database\nconst GetDataUser = cb => FetchData(\"/auth/getusers\", {}, \"get\", data => cb(data));\n//create a new group app\nconst NewGroup = (e = undefined, data = \"\") => {\n    let infoNewGroup = undefined;\n    if (data === \"\") {\n        e.preventDefault();\n        infoNewGroup = { name: e.target.group.value, type: \"All\" };\n    } else {\n        infoNewGroup = data;\n    }\n    FetchData(\"/events/newgroup\", infoNewGroup, \"post\", data => {\n        console.log(data);\n        //refresh group list\n        if (data.groupname !== undefined) {\n            socket.emit(\"groupregister\");\n            SwitchGroup(data.groupname);\n        }\n        Notifications(data.status, data.message);\n    });\n}\n\n//get the group change\nconst SwitchGroup = data => socket.emit(\"switchgroup\", data);\n//Ask for global messages\nconst Askformessages = groupname => socket.emit(\"askformessages\", groupname)\n//Ask for individual messages\nconst AskformessagesIndividual = ({ groupname, message }) => {\n    socket.emit(\"askformessages\", message === \"\" ? groupname : { groupname, message })\n};\n//create a new message\nconst NewMessage = data => {\n    if (data.message !== \"\") {\n        FetchData(\"/events/newmessage\", data, \"post\", info => {\n            Askformessages(data.groupname);\n            document.getElementsByName(\"message\")[0].value = \"\";\n        });\n    } else {\n        Notifications(406, \"The message field can not be empty\");\n    }\n}\n\n//convert a text string to a user object\nconst ConvertInfoUsers = data => {\n    let infoUser = [], dataUser = undefined;\n    Object.values(data).forEach(info => {\n        dataUser = info.split(\"-\");\n        infoUser.push({\n            _id: dataUser[0],\n            name: dataUser[1],\n            email: dataUser[2],\n            profile: dataUser[3]\n        });\n    });\n    return infoUser;\n}\n\nexport default {\n    GetDataUser,\n    NewGroup,\n    NewMessage,\n    SwitchGroup,\n    AskformessagesIndividual\n};\n\n\n","import React, { Component } from 'react';\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    Nav,\n    NavItem,\n    Input\n} from 'reactstrap';\n\nclass Navigation extends Component {\n    constructor(props) {\n        super(props);\n        this.toggle = this.toggle.bind(this);\n        this.state = {\n            isOpen: false\n        };\n        this.typechat = \"\";\n    }\n    toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    componentWillUpdate() {\n        this.typechat = this.props.typechat;\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar color=\"light\" light expand=\"md\">\n                    <h4>#{this.typechat === \"All\" ? this.props.groupname : 'Private conversation'}</h4>\n                    <NavbarToggler onClick={this.toggle} />\n                    <Collapse isOpen={this.state.isOpen} navbar>\n                        <Nav className=\"ml-auto\" navbar>\n                            <NavItem>\n                                <Input\n                                    className=\"inputHome\"\n                                    type=\"text\"\n                                    name=\"searchusers\"\n                                    placeholder=\"Search conversation\"\n                                    onChange={(e) => this.props.AskformessagesIndividual({\n                                        groupname: this.props.groupname,\n                                        message: e.target.value\n                                    })}\n                                />\n                            </NavItem>\n                        </Nav>\n                    </Collapse>\n                </Navbar>\n            </div>\n        );\n    }\n}\n\nexport default Navigation;","import React from 'react';\nimport {\n    Row, Col\n} from 'reactstrap';\nimport moment from 'moment';\n\nexport default props => (\n    <div>\n        <Row>\n            <Col md={1}>\n                <img width=\"70\" height=\"60\" alt=\"img\" className=\"rounded\" src={props.data.profile} />\n            </Col>\n            <Col md={11}>\n                <span>\n                    <b>{props.data.username}</b> &nbsp; <small> {moment(props.data.createdAt).format('MMMM Do YYYY, h:mm:ss a')}</small>\n                </span>\n                <Row>\n                    <Col md={12}>\n                        <p>\n                            {props.data.message}\n                        </p>\n                    </Col>\n                </Row>\n            </Col>\n        </Row>\n        <br />\n    </div>\n);","import React, { Component } from 'react';\nimport {\n    Button, Popover, PopoverHeader, PopoverBody,\n    Form, FormGroup, Input\n} from 'reactstrap';\n\nclass NewGroup extends Component {\n    constructor(props) {\n        super(props);\n\n        this.toggle = this.toggle.bind(this);\n        this.state = {\n            popoverOpen: false\n        };\n    }\n\n    toggle() {\n        this.setState({\n            popoverOpen: !this.state.popoverOpen\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"float-right\" >\n\n                <Button id=\"Popover1\" size=\"sm\" outline color=\"secondary\">\n                    <i className=\"fas fa-plus-circle fa-2x\"></i>\n                </Button>\n\n                <Popover placement=\"bottom\" isOpen={this.state.popoverOpen} target=\"Popover1\" toggle={this.toggle}>\n                    <PopoverHeader>Create a new Group</PopoverHeader>\n                    <PopoverBody>\n                        <Form onSubmit={this.props.newgroup.bind(this)}>\n                            <FormGroup>\n                                <Input type=\"text\" required name=\"group\" placeholder=\"Title of the new group\" />\n                            </FormGroup>\n                            <FormGroup>\n                                <Button size=\"lg\" block color=\"success\">Create</Button>\n                            </FormGroup>\n                        </Form>\n                    </PopoverBody>\n                </Popover>\n            </div>\n        );\n    }\n}\n\n\nexport default NewGroup;","import React from 'react';\nimport {\n    Badge, Button, NavItem, NavLink\n} from 'reactstrap';\n\n/*component to render the list of groups */\nconst Groups = props => (\n    <div>\n        <NavItem>\n            <NavLink>\n                <Button onClick={props.groupchange.bind(this)} outline color=\"secondary\" size=\"sm\" block>{props.data.name} &nbsp;\n                {/* Check if the group is for everyone or private, to show an informative text. */}\n                    <Badge color={props.data.type === \"All\" ? 'primary' : 'danger'}>{props.data.type}</Badge>\n                </Button>\n            </NavLink>\n        </NavItem>\n    </div>\n);\n\n/* component to render the list of connected users */\nconst Users = props => (\n    <div>\n        <NavLink>\n            <Button onClick={props.newgroup.bind(this)} outline color=\"secondary\" size=\"sm\" block>\n                <i className={`fas fa-circle ${props.userActive}`}></i>&nbsp; {props.name}\n            </Button>\n        </NavLink>\n    </div>\n);\n\nexport {\n    Groups,\n    Users\n}","import React from 'react';\nimport {\n    Button, Modal, ModalHeader, ModalBody, ModalFooter,\n    Form, FormGroup, Input, Row, Col\n} from 'reactstrap';\nimport UserEvent from '../resources/UserEvent';\n\nconst UserProfile = props => (\n    <div>\n        <Modal isOpen={props.modal} toggle={props.toggle}>\n            <Form onSubmit={e => UserEvent.FormUpdate(e, props.user._id)}>\n                <ModalHeader toggle={props.toggle}>\n                    <i className=\"fas fa-user-edit\"></i> Edit user profile\n                </ModalHeader>\n                <ModalBody>\n                    <Row form>\n                        <Col md={6}>\n                            <FormGroup>\n                                <Input type=\"text\" name=\"name\" placeholder=\"Enter your Name\" required\n                                    defaultValue={props.user.name} />\n                            </FormGroup>\n                        </Col>\n                        <Col md={6}>\n                            <FormGroup>\n                                <Input type=\"email\" name=\"email\" placeholder=\"Enter your Email\" required\n                                    defaultValue={props.user.email} />\n                            </FormGroup>\n                        </Col>\n                    </Row>\n                    <Row form>\n                        <Col md={6}>\n                            <FormGroup>\n                                <Input type=\"password\" name=\"password\" placeholder=\"Enter your Password\" />\n                            </FormGroup>\n                        </Col>\n                        <Col md={6}>\n                            <FormGroup>\n                                <Input type=\"select\" name=\"gender\" required defaultValue={props.user.gender}>\n                                    <option value=\"\">Select your gender</option>\n                                    <option>Male</option>\n                                    <option>Female</option>\n                                    <option>Others</option>\n                                </Input>\n                            </FormGroup>\n                        </Col>\n                    </Row>\n                    <Row form>\n                        <Col md={12}>\n                            <Input type=\"url\" name=\"profile\" placeholder=\"Enter your url image\"\n                                defaultValue={props.user.profile} />\n                        </Col>\n                    </Row>\n                </ModalBody>\n                <ModalFooter>\n                    <Button type=\"submit\" color=\"primary\">Edit</Button>\n                    <Button type=\"button\" color=\"secondary\" onClick={props.toggle}>Cancel</Button>\n                </ModalFooter>\n            </Form>\n\n        </Modal>\n    </div>\n);\n\nexport default UserProfile;","import React, { Component } from 'react';\r\nimport {\r\n    Button, Badge, CardTitle, Container, Col, Row, Input, CardImg, Card, Nav\r\n\r\n} from 'reactstrap';\r\nimport styles from './Home.module.css';\r\nimport Store from '../resources/store/Store';\r\nimport HomeEvent from '../resources/HomeEvent';\r\nimport Navigation from '../layouts/Navigation';\r\nimport Message from '../layouts/Message';\r\nimport NewGroup from '../layouts/NewGroup';\r\nimport { Groups, Users } from '../layouts/View';\r\nimport UserProfile from '../userprofile/UserProfile';\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            _id: \"\",\r\n            name: \"\",\r\n            email: \"\",\r\n            profile: \"\",\r\n            gender: \"\",\r\n            usersCount: 0,\r\n            groupsCount: 1,\r\n            users: [],\r\n            groups: [],\r\n            groupname: \"\",\r\n            message: \"\",\r\n            messages: [],\r\n            modal: false,\r\n            typechat: \"All\"\r\n        }\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    //active modal profile\r\n    toggle() {\r\n        this.setState(prevState => ({\r\n            modal: !prevState.modal\r\n        }));\r\n    }\r\n\r\n    componentDidMount() {\r\n        /* if you are authenticated then you can access  */\r\n        if (this.props.fakeAuth('compare')) {\r\n            //fill list variables of users and groups\r\n            HomeEvent.GetDataUser(data => this.setState(data.response));\r\n\r\n            Store.subscribe(() => {\r\n                this.setState({\r\n                    users: Store.getState().users,\r\n                    usersCount: Store.getState().users.length,\r\n                    groups: Store.getState().groups,\r\n                    groupsCount: document.getElementsByClassName(\"groupsNav\")[0].childElementCount,\r\n                    groupname: Store.getState().groupname,\r\n                    messages: Store.getState().messages\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Container fluid>\r\n                {this.props.fakeAuth('private')}\r\n                <Row >\r\n                    <Col md={1} className={`text-white ${styles.menubar1}`}>\r\n                        <br />\r\n                        <Row>\r\n                            <Col md={12}>\r\n                                <CardImg className=\"rounded\" top width=\"100%\" height=\"60%\" src={this.state.profile} alt=\"Card image cap\" />\r\n                                <CardTitle>{this.state.name}</CardTitle>\r\n                            </Col>\r\n                            <Col md={12} className=\"columnBtns\">\r\n                                <Button outline color=\"secondary\" onClick={this.toggle}>\r\n                                    <i className=\"fas fa-user-edit fa-2x\"></i>\r\n                                </Button>\r\n                            </Col>\r\n                            <Col md={12}>\r\n                                <Button onClick={this.props.logout} className=\"mt-3\" outline color=\"danger\">\r\n                                    <i className=\"fas fa-sign-out-alt fa-3x\"></i>\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                    <Col md={2} className={`text-white ${styles.menubar2}`} >\r\n                        <br />\r\n                        <h3 >Groups\r\n                            <small className=\"ml-2\">\r\n                                <Badge color=\"warning\">\r\n                                    {this.state.groupsCount}\r\n                                </Badge>\r\n                            </small>\r\n                            <NewGroup newgroup={(e) => HomeEvent.NewGroup(e)}></NewGroup>\r\n                        </h3>\r\n                        <Row >\r\n                            <Col md={12} className=\"mt-2\">\r\n                                <Card body className={styles.groupContent}>\r\n                                    {/* check the list of public and private groups */}\r\n                                    <Nav vertical className=\"groupsNav\">\r\n                                        <Groups\r\n                                            groupchange={() => {\r\n                                                HomeEvent.SwitchGroup(\"group1\")\r\n                                                this.setState({ typechat: \"All\" })\r\n                                            }}\r\n                                            data={{ type: \"All\", name: \"group1\" }}>\r\n                                        </Groups>\r\n                                        {this.state.groups.map((data, i) =>\r\n                                            data.type === \"All\" ?\r\n                                                <Groups\r\n                                                    groupchange={() => {\r\n                                                        HomeEvent.SwitchGroup(data.name)\r\n                                                        this.setState({ typechat: \"All\" })\r\n                                                    }}\r\n                                                    key={i}\r\n                                                    data={data}>\r\n                                                </Groups>\r\n                                                : \"\"\r\n                                        )}\r\n                                    </Nav>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                        <br />\r\n                        <h3>Users\r\n                            <small>\r\n                                <Badge className=\"float-right\" color=\"warning\">\r\n                                    {this.state.usersCount}\r\n                                </Badge>\r\n                            </small>\r\n                        </h3>\r\n                        <Input\r\n                            className=\"float-right\"\r\n                            type=\"search\"\r\n                            name=\"searchusers\"\r\n                            placeholder=\"Search users\"\r\n                        />\r\n                        <br /><br /><br />\r\n                        <Row>\r\n                            <Col md={12} >\r\n                                <Card body className={styles.usersContent}>\r\n                                    {/* send information of a new private group */}\r\n                                    <Nav vertical >\r\n                                        {this.state.users.map((data, i) => (\r\n                                            data._id !== this.state._id ?\r\n                                                <Users key={i}\r\n                                                    newgroup={() => {\r\n                                                        this.setState({ typechat: \"Private\" })\r\n                                                        /* send data to the server for the \r\n                                                        creation of new private groups */\r\n                                                        HomeEvent.NewGroup(undefined, {\r\n                                                            name: `${this.state._id}-${data._id}`,\r\n                                                            type: \"Private\",\r\n                                                            relationship: {\r\n                                                                user1: this.state._id,\r\n                                                                user2: data._id\r\n                                                            }\r\n                                                        })\r\n                                                    }}\r\n                                                    name={data.name}\r\n                                                    email={data.email}\r\n                                                    userActive={styles.userActive}\r\n                                                >\r\n                                                </Users> : \"\"\r\n                                        ))}\r\n                                    </Nav>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                    <Col md={9}>\r\n                        <Navigation\r\n                            groupname={this.state.groupname}\r\n                            typechat={this.state.typechat}\r\n                            AskformessagesIndividual={HomeEvent.AskformessagesIndividual.bind(this)}></Navigation>\r\n                        <Row className=\"mt-1 mb-2\">\r\n                            <Col md={12} >\r\n                                <Card body className={styles.bodyContent}>\r\n                                    {this.state.messages.map((data, i) => (\r\n                                        <Message data={data} key={i}></Message>\r\n                                    ))}\r\n                                </Card>\r\n                            </Col>\r\n                            <Col md={12} >\r\n                                {/*Button that executes the action of sending messages */}\r\n                                <Input\r\n                                    onChange={e => this.setState({ message: e.target.value })}\r\n                                    type=\"textarea\"\r\n                                    name=\"message\"\r\n                                    placeholder=\"Write a new message\" /> <br />\r\n                                <Button onClick={() => HomeEvent.NewMessage({\r\n                                    groupname: this.state.groupname,\r\n                                    username: this.state.name,\r\n                                    profile: this.state.profile,\r\n                                    message: this.state.message\r\n                                })} color=\"primary\" size=\"lg\" block>\r\n                                    Send Message\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n                {/* send user information, to update your data */}\r\n                <UserProfile modal={this.state.modal} user={{\r\n                    _id: this.state._id,\r\n                    name: this.state.name,\r\n                    email: this.state.email,\r\n                    profile: this.state.profile,\r\n                    gender: this.state.gender\r\n                }} toggle={this.toggle}></UserProfile>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'react-notifications/lib/notifications.css';\nimport App from './components/app/App';\nimport Register from './components/register/Register';\nimport Home from './components/home/Home';\nimport { NotificationContainer } from 'react-notifications';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\n\n\n/*function authenticated app */\nconst Authenticated = (type, session = localStorage.getItem('fakeAuth')) => {\n    return type === 'public' && session !== null ? <Redirect to={'/home'} /> :\n        type === 'private' && session === null ? <Redirect to={'/'} /> :\n            type === 'compare' ? session : null;\n}\n\n/*function logout app */\nconst Logout = () => {\n    if (window.confirm(\"Are you sure you want to log out?\")) {\n        localStorage.removeItem('fakeAuth');\n        window.location.href = \"/\";\n    }\n}\n\n/*function render components app */\nconst RouteProvider = ({ component: Component, ...objectPath }) => (\n    <Route  {...objectPath} render={props => <Component {...props} fakeAuth={Authenticated} logout={Logout} />} />\n);\n\n\n// Config routes app\nReactDOM.render(\n    <Router>\n        <div>\n            <NotificationContainer />\n            <Switch>\n                <RouteProvider exact path='/' component={App} />\n                <RouteProvider path='/register' component={Register} />\n                <RouteProvider path='/home' component={Home} />\n                <Route render={() => <Redirect to=\"/\" />} />\n            </Switch >\n        </div>\n    </Router>\n    , document.getElementById('root'));\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menubar1\":\"Home_menubar1__10zEC\",\"menubar2\":\"Home_menubar2__3jj5k\",\"nav-item\":\"Home_nav-item__1TuS9\",\"userActive\":\"Home_userActive__pe7Vb\",\"bodyContent\":\"Home_bodyContent__5df6w\",\"groupContent\":\"Home_groupContent__1KrMB\",\"usersContent\":\"Home_usersContent__2FL0i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enlace\":\"App_enlace__2ew_r\"};"],"sourceRoot":""}